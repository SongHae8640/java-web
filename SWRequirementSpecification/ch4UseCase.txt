유스케이스 목적 : 시나리오를 읽지 않아도 동작 구조를 이해 할 수 있게 하기 위해서

한장의 유스케이스가 복잡한 시나리오라면 큰그림+작은그림 여러개로도 표현 가능

약속된 기호
	actor : 졸라맨 - 시스템과 상호작용하는 시스템 외부의 존재, 입력 또는 출력의 존재
		졸라맨으로 그리지만 사람일수도 있고 시스템을 수 도 있음 > 밑에 이름을 표시해둠
		시스템과 상호작용 해야 한다.
		액터에서 액터로 가는 화살표는 상속의 개념/ 구매자 <-회원 
								  \<-비회원 부모에게 화살표가 간다. 
	usecase : 동그라미 - 개별적인 (추상화된) 기능 단위 , 큰 의미로 잡고 그 내부에 있는 세부 내용은 따로 유스케이스를 잡는다.
	라인 - 화살표 : 진행의 흐름, input과 output을 구분해서 
	     - 점선 -포함관계 include 정방향, 
				기존 유스케이스를 재사용
				사용자의 의지와 상관없일어 나는 경우
				반드시 수행되는 흐름
				즉, 하나로 봐도 되는 관계
		    -확장관계 extend, 진행단계를 추가

	시스템 : 박스 - 상황에 따라 시스템 안에 시스템이 있을 수 있음 (웹에서는 그러기 어렵)

참고 : https://m.blog.naver.com/PostView.nhn?blogId=ljh0326s&logNo=221001892737&proxyReferer=https%3A%2F%2Fwww.google.com%2F
	http://blog.daum.net/omeju/4676281
유스케이스 명세서 참고 : https://codedragon.tistory.com/5415

xml 사이트  
	start UML http://staruml.io/ 
		무료 https://sourceforge.net/projects/staruml/